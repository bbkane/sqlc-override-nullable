// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: env.sql

package sqlcgen

import (
	"context"
)

const envCreate = `-- name: EnvCreate :one
INSERT INTO env (
    id,
    create_time
) VALUES (
    ?,
    ?
)
RETURNING id, create_time
`

type EnvCreateParams struct {
	ID         int64
	CreateTime string
}

func (q *Queries) EnvCreate(ctx context.Context, arg EnvCreateParams) (Env, error) {
	row := q.db.QueryRowContext(ctx, envCreate, arg.ID, arg.CreateTime)
	var i Env
	err := row.Scan(&i.ID, &i.CreateTime)
	return i, err
}

const envGet = `-- name: EnvGet :one
SELECT id, create_time FROM env
WHERE id = ?
`

func (q *Queries) EnvGet(ctx context.Context, id int64) (Env, error) {
	row := q.db.QueryRowContext(ctx, envGet, id)
	var i Env
	err := row.Scan(&i.ID, &i.CreateTime)
	return i, err
}

const envUpdate = `-- name: EnvUpdate :exec
UPDATE env SET
    create_time = COALESCE(?1, create_time)
WHERE id = ?2
`

type EnvUpdateParams struct {
	CreateTime *string
	ID         int64
}

// See https://docs.sqlc.dev/en/latest/howto/named_parameters.html#nullable-parameters
func (q *Queries) EnvUpdate(ctx context.Context, arg EnvUpdateParams) error {
	_, err := q.db.ExecContext(ctx, envUpdate, arg.CreateTime, arg.ID)
	return err
}
