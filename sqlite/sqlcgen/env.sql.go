// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: env.sql

package sqlcgen

import (
	"context"
)

const envCreate = `-- name: EnvCreate :one
INSERT INTO env (
    create_time
) VALUES (
    ?
)
RETURNING id, create_time
`

func (q *Queries) EnvCreate(ctx context.Context, createTime string) (Env, error) {
	row := q.db.QueryRowContext(ctx, envCreate, createTime)
	var i Env
	err := row.Scan(&i.ID, &i.CreateTime)
	return i, err
}

const envList = `-- name: EnvList :many
SELECT id, create_time FROM env
ORDER BY create_time ASC
`

func (q *Queries) EnvList(ctx context.Context) ([]Env, error) {
	rows, err := q.db.QueryContext(ctx, envList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Env
	for rows.Next() {
		var i Env
		if err := rows.Scan(&i.ID, &i.CreateTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const envUpdate = `-- name: EnvUpdate :exec
UPDATE env SET
    create_time = COALESCE(?1, create_time)
WHERE id = ?2
`

type EnvUpdateParams struct {
	CreateTime *string
	ID         int64
}

// See https://docs.sqlc.dev/en/latest/howto/named_parameters.html#nullable-parameters
func (q *Queries) EnvUpdate(ctx context.Context, arg EnvUpdateParams) error {
	_, err := q.db.ExecContext(ctx, envUpdate, arg.CreateTime, arg.ID)
	return err
}
